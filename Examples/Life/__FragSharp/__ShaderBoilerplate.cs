// This file was auto-generated by FragSharp. It will be regenerated on the next compilation.
// Manual changes made will not persist and may cause incorrect behavior between compilations.

using System;
using System.Collections.Generic;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

using FragSharpFramework;

namespace FragSharpFramework
{
    public class FragSharp
    {
        public static ContentManager Content;
        public static GraphicsDevice GraphicsDevice;
        public static void Initialize(ContentManager Content, GraphicsDevice GraphicsDevice)
        {
            FragSharp.Content = Content;
            FragSharp.GraphicsDevice = GraphicsDevice;
            Life.DrawLife.CompiledEffect = Content.Load<Effect>("FragSharpShaders/DrawLife");
            Life.UpdateLife.CompiledEffect = Content.Load<Effect>("FragSharpShaders/UpdateLife");
        }
    }
}

namespace Life
{
    public partial class DrawLife
    {
        public static Effect CompiledEffect;

        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Current);
            GridHelper.DrawGrid();
        }
        public static void Apply(vec4 cameraPos, float cameraAspect, Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Current);
            GridHelper.DrawGrid();
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(cameraPos, cameraAspect, Current);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(cameraPos, cameraAspect, Current);
        }
        public static void Using(vec4 cameraPos, float cameraAspect, Texture2D Current)
        {
            CompiledEffect.Parameters["vs_param_cameraPos"].SetValue(FragSharpMarshal.Marshal(cameraPos));
            CompiledEffect.Parameters["vs_param_cameraAspect"].SetValue(FragSharpMarshal.Marshal(cameraAspect));
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


namespace Life
{
    public partial class UpdateLife_
    {
        public static Effect CompiledEffect;

        public static void Apply(Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current);
            GridHelper.DrawGrid();
        }
        public static void Apply(Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current);
            GridHelper.DrawGrid();
        }
        public static void Using(Texture2D Current, RenderTarget2D Output, Color Clear)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Clear);
            Using(Current);
        }
        public static void Using(Texture2D Current, RenderTarget2D Output)
        {
            GridHelper.GraphicsDevice.SetRenderTarget(Output);
            GridHelper.GraphicsDevice.Clear(Color.Transparent);
            Using(Current);
        }
        public static void Using(Texture2D Current)
        {
            CompiledEffect.Parameters["fs_param_Current_Texture"].SetValue(FragSharpMarshal.Marshal(Current));
            CompiledEffect.Parameters["fs_param_Current_size"].SetValue(FragSharpMarshal.Marshal(vec(Current.Width, Current.Height)));
            CompiledEffect.Parameters["fs_param_Current_dxdy"].SetValue(FragSharpMarshal.Marshal(1.0f / vec(Current.Width, Current.Height)));
            CompiledEffect.CurrentTechnique.Passes[0].Apply();
        }
    }
}


